/*
 * GeoNetwork 4.0.0 OpenAPI Documentation
 * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: geonetwork-users@lists.sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.theialand.insitu.dataportal.api.geonetwork.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * SiteInformation
 */
@JsonPropertyOrder({
  SiteInformation.JSON_PROPERTY_CATALOGUE,
  SiteInformation.JSON_PROPERTY_INDEX,
  SiteInformation.JSON_PROPERTY_MAIN,
  SiteInformation.JSON_PROPERTY_DATABASE,
  SiteInformation.JSON_PROPERTY_VERSION
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-04-13T11:23:44.539800+02:00[Europe/Paris]")
public class SiteInformation {
  public static final String JSON_PROPERTY_CATALOGUE = "catalogue";
  private Map<String, String> catalogue = null;

  public static final String JSON_PROPERTY_INDEX = "index";
  private Map<String, String> index = null;

  public static final String JSON_PROPERTY_MAIN = "main";
  private Map<String, String> main = null;

  public static final String JSON_PROPERTY_DATABASE = "database";
  private Map<String, String> database = null;

  public static final String JSON_PROPERTY_VERSION = "version";
  private Map<String, String> version = null;


  public SiteInformation catalogue(Map<String, String> catalogue) {
    
    this.catalogue = catalogue;
    return this;
  }

  public SiteInformation putCatalogueItem(String key, String catalogueItem) {
    if (this.catalogue == null) {
      this.catalogue = new HashMap<>();
    }
    this.catalogue.put(key, catalogueItem);
    return this;
  }

   /**
   * Get catalogue
   * @return catalogue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CATALOGUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, String> getCatalogue() {
    return catalogue;
  }


  public void setCatalogue(Map<String, String> catalogue) {
    this.catalogue = catalogue;
  }


  public SiteInformation index(Map<String, String> index) {
    
    this.index = index;
    return this;
  }

  public SiteInformation putIndexItem(String key, String indexItem) {
    if (this.index == null) {
      this.index = new HashMap<>();
    }
    this.index.put(key, indexItem);
    return this;
  }

   /**
   * Get index
   * @return index
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_INDEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, String> getIndex() {
    return index;
  }


  public void setIndex(Map<String, String> index) {
    this.index = index;
  }


  public SiteInformation main(Map<String, String> main) {
    
    this.main = main;
    return this;
  }

  public SiteInformation putMainItem(String key, String mainItem) {
    if (this.main == null) {
      this.main = new HashMap<>();
    }
    this.main.put(key, mainItem);
    return this;
  }

   /**
   * Get main
   * @return main
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_MAIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, String> getMain() {
    return main;
  }


  public void setMain(Map<String, String> main) {
    this.main = main;
  }


  public SiteInformation database(Map<String, String> database) {
    
    this.database = database;
    return this;
  }

  public SiteInformation putDatabaseItem(String key, String databaseItem) {
    if (this.database == null) {
      this.database = new HashMap<>();
    }
    this.database.put(key, databaseItem);
    return this;
  }

   /**
   * Get database
   * @return database
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DATABASE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, String> getDatabase() {
    return database;
  }


  public void setDatabase(Map<String, String> database) {
    this.database = database;
  }


  public SiteInformation version(Map<String, String> version) {
    
    this.version = version;
    return this;
  }

  public SiteInformation putVersionItem(String key, String versionItem) {
    if (this.version == null) {
      this.version = new HashMap<>();
    }
    this.version.put(key, versionItem);
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, String> getVersion() {
    return version;
  }


  public void setVersion(Map<String, String> version) {
    this.version = version;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SiteInformation siteInformation = (SiteInformation) o;
    return Objects.equals(this.catalogue, siteInformation.catalogue) &&
        Objects.equals(this.index, siteInformation.index) &&
        Objects.equals(this.main, siteInformation.main) &&
        Objects.equals(this.database, siteInformation.database) &&
        Objects.equals(this.version, siteInformation.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(catalogue, index, main, database, version);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SiteInformation {\n");
    sb.append("    catalogue: ").append(toIndentedString(catalogue)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    main: ").append(toIndentedString(main)).append("\n");
    sb.append("    database: ").append(toIndentedString(database)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

