/*
 * koppen-climate
 * openAPI definition for koppen-climate API. The API is queried using a location and return the Koppen climate corresponding to the location. Koppen climates come from Hylke E. Beck et al. 2018. https://doi.org/10.1038/sdata.2018.214. The dataset used is Beck_KG_V1_present_conf_0p0083.tif that represents the present-day (1980–2016) Köppen-Geiger climate classification at a spacial resolution of 0.0083°.
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.theialand.insitu.dataportal.api.koppenclimate.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * KoppenClimateCodeLiteral
 */
@JsonPropertyOrder({
  KoppenClimateCodeLiteral.JSON_PROPERTY_CODE,
  KoppenClimateCodeLiteral.JSON_PROPERTY_LITERAL
})
@JsonTypeName("KoppenClimateCodeLiteral")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-04-15T15:53:41.507160+02:00[Europe/Paris]")
public class KoppenClimateCodeLiteral {
  public static final String JSON_PROPERTY_CODE = "code";
  private String code;

  public static final String JSON_PROPERTY_LITERAL = "literal";
  private String literal;

  public KoppenClimateCodeLiteral() { 
  }

  public KoppenClimateCodeLiteral code(String code) {
    
    this.code = code;
    return this;
  }

   /**
   * Get code
   * @return code
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCode() {
    return code;
  }


  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCode(String code) {
    this.code = code;
  }


  public KoppenClimateCodeLiteral literal(String literal) {
    
    this.literal = literal;
    return this;
  }

   /**
   * Get literal
   * @return literal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_LITERAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLiteral() {
    return literal;
  }


  @JsonProperty(JSON_PROPERTY_LITERAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLiteral(String literal) {
    this.literal = literal;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KoppenClimateCodeLiteral koppenClimateCodeLiteral = (KoppenClimateCodeLiteral) o;
    return Objects.equals(this.code, koppenClimateCodeLiteral.code) &&
        Objects.equals(this.literal, koppenClimateCodeLiteral.literal);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, literal);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KoppenClimateCodeLiteral {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    literal: ").append(toIndentedString(literal)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

